from django.urls import path
from . import views
from . import recommendations
from . import content_search
from rest_framework.urlpatterns import format_suffix_patterns
from rest_framework.authtoken.views import obtain_auth_token
from . import feeds

search_podcasts_endpoint = 'podcasts/search/'
search_books_endpoint = 'books/search/'
get_podcasts_episodes_endpoint = 'podcasts/episodes/'

urlpatterns = [
    path('movies/<int:pk>', views.MovieDetail.as_view()),
    path('tvshow/<int:pk>', views.TVDetail.as_view()),
    path('movie/', views.CreateMovie.as_view()),
    path('movies/', views.MoviesList.as_view()),
    path('recs/', views.MovieRecsDetail.as_view()),
    path('users/', views.UserList.as_view()),
    path('groups/', views.GroupList.as_view()),
    path('group/<int:pk>', views.GroupByID.as_view()),
    path('api-token-auth/', obtain_auth_token, name='api_token_auth'),
    path('user/', views.UserCreate.as_view()),
    path('logout/', views.Logout.as_view()),
    path('addmembertogroup/', views.AddToGroup.as_view()),
    path('usersgrouplist/', views.UserGroupList.as_view()),
    path('groupmemberslist/', views.GroupMembersList.as_view()),
    path('userinfo/<int:pk>', views.UserDetail.as_view()),
    path('currentuserinfo/', views.CurrentUserDetail.as_view()),
    path('usernameinfo/<username>', views.UserDetailByUser.as_view()),
    path('groupmanagement/<int:groupID>/remove-member/<int:userID>', views.RemoveMember.as_view()),
    path('groupmanagement/<int:pk>/remove-group', views.RemoveGroup.as_view()),
    path('groupmanagement/<int:pk>/update', views.UpdateGroup.as_view()),
    path('groupmanagement/<int:pk>/update-admin', views.UpdateGroupAdmin.as_view()),
    path('groupmanagement/<int:groupID>/remove-movie-rec/<int:recID>', views.RemoveMovieRecFromGroup.as_view()),
    path('movierecommendation/', views.CreateMovieRec.as_view()),
    path('movierecommendation/<int:pk>', views.GetMovieRec.as_view()),
    path('movierecommendation/<int:pk>/update', views.RemoveUpdateMovieRec.as_view()),
    path('addmovierectogroup/', views.AddMovieRecToGroup.as_view()),
    path('groups/<int:groupID>/movierecs', views.MovieRecsByGroup.as_view()),
    path('commentonmovierec/', views.CreateCommentOnPost.as_view()),
    path('commentonmovierec/<int:pk>/update', views.UpdateCommentOnPost.as_view()),
    path('movierecsingroups/<int:postID>/comments', views.GetCommentsOnPost.as_view()),
    path('movierecsingroups/<int:postID>/comments2', feeds.GetCommentsOnPost.as_view()),
    path('endorsemovierecingroup/', views.CreateEndorsement.as_view()),
    path('movierecendorsements/<int:pk>/delete', views.DeleteEndorsement.as_view()),
    path('movierecsingroups/<int:postID>/endorsements', views.GetUserWhoEndorsePost.as_view()),
    path('movierecingroup/<int:pk>', views.GetMovieRecInGroup.as_view()),
    path('likecommentonmovierec/', views.LikeCommentOnPost.as_view()),
    path('likeoncomment/<int:pk>/delete', views.DeleteLike.as_view()),
    path('commentsonmovierec/<int:commentID>/likes', views.GetUsersWhoLikeComment.as_view()),
    path('commentsonmovierec/<int:commentID>/likes/delete-current-user-like', views.DeleteCurrentuserLike.as_view()),
    path('currentuserrecs/', views.GetCurrenUserMovieRecs.as_view()),
    path('users/<int:userID>/movierecommendations', views.GetMovieRecsByUser.as_view()),
    path('currentuser/movierecsfeed', views.GetCurrentuserMovieRecsFeed.as_view()),
    path('currentuser/commonmovierecsfeed/<int:userID>', views.GetCommonMovieRecsFeed.as_view()),
    path('currentuser/commongroups/<int:userID>', views.GetCommonGroups.as_view()),
    path('group/<int:groupID>/movierec/<int:recID>/info', views.GetPostInfo.as_view()),
    path('groups/<int:groupID>/movierecs-revised', views.GetMovieRecsInGroups.as_view()),
    path('movierecommendation/<int:movieRecID>/groupsbelongsto', views.GetGroupsRecIn.as_view()),
    path('movierecsingroups/<int:postID>/endorsements/delete-current-user-endorsement', views.DeleteCurrentUserEndorsement.as_view()),
    path('movies/titles/', views.MovieSearchByTitle.as_view()),
    path('movies/titles/<str:title>/<int:limit>', views.MovieSearchByTitleTemp.as_view()),
    path('tv/titles/<str:title>/<int:limit>', views.TVSearchByTitle.as_view()),
    path('group-management/uploadphoto/', views.AddGroupProPic.as_view()),
    path('groups/<int:groupID>/getprofilepickey', views.GetCurrentGroupProfilePicture.as_view()),
    path('user-management/currentuser/photoupload', views.upload_profile_pic),
    path('user/currentprofilepicture', views.GetCurrentUserProfilePic.as_view()),
    path('user/<int:userID>/profilepicture', views.GetUserProfilePicture.as_view()),
    path('currentuser/groups/', views.get_user_groupinfo),
    path('currentuser/notifications/', views.GetNotificationsCurrentUser.as_view()),
    path('currentuser/notifications/<int:pk>/seen', views.MarkNotificationAsSeen.as_view()),
    path('currentuser/notificationsseen/', views.mark_user_notification_as_seen),
    path('groups/<int:groupID>/groupchat/uploadphoto', views.AddGroupChatPic.as_view()),
    path('currentuser/overallfeedlo/', feeds.OverallFeed.as_view()),
    path('groups/<int:groupID>/feedlo/', feeds.GroupFeed.as_view()),
    path('groups/<int:groupID>/groupphotos/', views.GetGroupchatPhotos.as_view()),
    path('currentuser/addtointerested/', views.AddItemToInterested.as_view()),
    path('createlist/', views.CreateRankings.as_view()),
    path('additemtolist/', views.AddItemToList.as_view()),
    path('currentuser/lists/', views.GetUserLists.as_view()),
    path('lists/<int:rankingsID>/items/', views.GetRankingstItems.as_view()),
    path('lists/<int:pk>/update/', views.UpdateDeleteRankings.as_view()),
    path('listitems/<int:pk>/update/', views.UpdateDeleteRankingsItem.as_view()),
    path('currentuser/removefrominterested/', views.RemoveFromInterested.as_view()),
    path('currentuser/exclusions/', views.GetCurrentUserExclusions.as_view()),
    path('currentuser/deleteexclusion/', views.CurrentUserDeleteExclusion.as_view()),
    path('currentuser/addexclusion/', views.CurrentUserCreateExclusions.as_view()),
    path('currentuser/report/', views.CreateReport.as_view()),
    path('books/search/', content_search.SearchGoogleBooksAPI.as_view()),
    path('currentuser/recommendbook/', recommendations.RecommendBookv2.as_view()),
    path('podcasts/search/', content_search.SearchSpotifyPodcasts.as_view()),
    path('currentuser/recommendpodcast/', recommendations.RecommendPodcastv2.as_view()),
    path('currentuser/recommendpodcastepisode/', recommendations.RecommendPodcastEpisodev2.as_view()),
    path('currentuser/recommendmovie/', recommendations.RecommendMovieV2.as_view()),
    path('currentuser/recommendshow/', recommendations.RecommendTVShowV2.as_view()),
    path('podcasts/episodes/', views.GetPodcastEpisodes.as_view()),
    path('currentuser/lists/', views.GetUserLists.as_view()),
    path('userlists/', views.GetUserLists.as_view()),
    path('currentuser/addorremoveendorsement/', views.AddOrRemoveEndorsement.as_view()),
    path('groupjoincodes/', views.add_group_join_codes),
    path('joingroupbycode/', views.join_group_by_code),
    path('movietv/search/', content_search.search_tmdb),
    path('currentuser/leavegroup/', views.leave_group),
    path('users/search/', views.SearchUserByUserName.as_view()),
    path('ping/', views.ping)
]

urlpatterns = format_suffix_patterns(urlpatterns)
