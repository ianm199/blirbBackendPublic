# Generated by Django 3.0.4 on 2020-04-19 02:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('movieID', models.AutoField(primary_key=True, serialize=False)),
                ('movieTitle', models.CharField(help_text='Enter movie title', max_length=2048)),
                ('adult', models.BooleanField(default=False)),
                ('director', models.CharField(blank=True, help_text='Enter a director', max_length=512)),
                ('description', models.TextField(blank=True, help_text='Enter description', max_length=2048)),
                ('runtime', models.IntegerField(blank=True)),
                ('yearReleased', models.IntegerField(blank=True)),
                ('backdropPath', models.TextField(blank=True, default=None, max_length=2048)),
                ('belongsToCollection', models.TextField(blank=True, default=None)),
                ('genres', models.TextField(blank=True, default=None)),
                ('tmdbID', models.IntegerField(blank=True, default=None)),
                ('imdb_id', models.IntegerField(blank=True, default=None)),
                ('original_language', models.CharField(blank=True, default=None, max_length=512)),
                ('original_title', models.CharField(blank=True, default=None, max_length=2048)),
                ('popularity', models.DecimalField(blank=True, decimal_places=10, default=0.0, max_digits=12)),
                ('posterPath', models.TextField(blank=True, default=None, max_length=4096)),
                ('releaseDate', models.DateField(blank=True, default=None)),
                ('status', models.CharField(blank=True, default=None, max_length=128)),
                ('tagline', models.TextField(blank=True, default='', max_length=2048)),
            ],
            options={
                'ordering': ['movieTitle'],
            },
        ),
        migrations.CreateModel(
            name='MovieRecommendation',
            fields=[
                ('movieRecID', models.AutoField(db_column='movieRecID', primary_key=True, serialize=False)),
                ('recommendationDesc', models.CharField(help_text='Enter reccomendation', max_length=2048)),
                ('reccomenderRating', models.IntegerField(help_text='Enter rating')),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('movieID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='movie', to='catalogTemp.Movie')),
                ('recommenderUserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['createdAt'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=512)),
                ('body', models.CharField(max_length=512)),
                ('profilePicture', models.CharField(max_length=1024)),
                ('userID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('groupID', models.AutoField(primary_key=True, serialize=False)),
                ('groupName', models.CharField(help_text='Enter group name', max_length=512)),
                ('groupDesc', models.CharField(help_text='Enter group description', max_length=2048)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('createrUserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MovieRecommendationWithinGroup',
            fields=[
                ('groupRecID', models.AutoField(primary_key=True, serialize=False)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('groupID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='catalogTemp.UserGroup')),
                ('memberID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('recID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='catalogTemp.MovieRecommendation')),
            ],
            options={
                'ordering': ['createdAt'],
                'unique_together': {('recID', 'groupID')},
            },
        ),
        migrations.CreateModel(
            name='CommentOnGroupMovieRecommendation',
            fields=[
                ('commentID', models.AutoField(primary_key=True, serialize=False)),
                ('commentBody', models.CharField(default='', max_length=8192)),
                ('commentResponseID', models.IntegerField(default=0, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('commentUserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('postID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='catalogTemp.MovieRecommendationWithinGroup')),
            ],
            options={
                'ordering': ['createdAt'],
            },
        ),
        migrations.CreateModel(
            name='LikesOnCommentsOnPosts',
            fields=[
                ('likeID', models.AutoField(primary_key=True, serialize=False)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('commentID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='catalogTemp.CommentOnGroupMovieRecommendation')),
                ('userID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('userID', 'commentID')},
            },
        ),
        migrations.CreateModel(
            name='GroupMembers',
            fields=[
                ('groupMemberID', models.AutoField(primary_key=True, serialize=False)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('groupID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='catalogTemp.UserGroup')),
                ('userID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('userID', 'groupID')},
            },
        ),
        migrations.CreateModel(
            name='EndorsementsOnMovieRecsInGroups',
            fields=[
                ('endorsementID', models.AutoField(primary_key=True, serialize=False)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('endorserUserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('postID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='catalogTemp.MovieRecommendationWithinGroup')),
            ],
            options={
                'unique_together': {('endorserUserID', 'postID')},
            },
        ),
    ]
